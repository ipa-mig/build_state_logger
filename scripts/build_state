#!/usr/bin/env python
#################################################################
# \file
#
# \note
#   Copyright (c) 2016 \n
#   Fraunhofer Institute for Manufacturing Engineering
#   and Automation (IPA) \n\n
#
#################################################################
#
# \author
#   Author: Matthias Gruhler (mig@ipa.fhg.de)
#
# \date Date of creation: January 2017
#
# \brief
#    This tool allows to log the state of the repositories within a catkin workspace at compile/install time.
#
#################################################################
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     - Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer. \n
#     - Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution. \n
#     - Neither the name of the Fraunhofer Institute for Manufacturing
#       Engineering and Automation (IPA) nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission. \n
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License LGPL as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License LGPL for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License LGPL along with this program.
# If not, see <http://www.gnu.org/licenses/>.
#
#################################################################

from __future__ import print_function

import argparse
import os
from datetime import datetime
from git import Repo


class RepoStatus(object):

    def __init__(self, name, path, sha=None,
                 dirty=None, untracked=None,
                 modified=None, added=None, deleted=None, renamed=None,
                 patch=None,
                 bare=False):
        # TODO: assert that the data are of the correct type?
        self.name = name
        self.path = path
        self.sha = sha
        self.dirty = dirty
        self.untracked = untracked
        self.modified = modified
        self.added = added
        self.deleted = deleted
        self.renamed = renamed
        self.patch = patch
        self.bare = bare

    def __repr__(self):
        return("RepoStatus(name={}, path={})".format(self.name, self.path))

    def __str__(self):
        content = "Repository: " + self.name + "\n" + \
                  "\tPath: " + self.path + "\n"
        if self.bare:
            content += "\tBare Repository!\n"
        else:
            content += "\tSHA: " + self.sha + "\n" + \
                       "\tdirty: " + str(self.dirty) + "\n" + \
                       "\tuntracked: " + self._list_to_string(self.untracked) + "\n" + \
                       "\tmodified: " + self._list_to_string(self.modified) + "\n" + \
                       "\tadded: " + self._list_to_string(self.added) + "\n" + \
                       "\tdeleted: " + self._list_to_string(self.deleted) + "\n" + \
                       "\trenamed: " + self._renamed_to_str(self.renamed) + "\n"
            if self.patch is None:
                content += "\tpatch: None\n"
            else:
                content += "\tpatch:\n" + str(self.patch) + "\n"
        return content

    def as_string(self):
        return self.__str__()

    def _list_to_string(self, mylist):
        if mylist is None or not mylist:
            return "None"
        else:
            return str(self._deunicode_list(mylist))

    def _deunicode_list(self, mylist):
        return [x.encode('UTF8') if not isinstance(x, list) else self._deunicode_list(x) for x in mylist]

    def _renamed_to_str(self, renamed):
        if renamed is None or not renamed:
            return "None"
        else:
            deunicoded = self._deunicode_list(renamed)
            return str([x[0]+" -> "+x[1] for x in deunicoded])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Checks the build state of your catkin workspace.\n'
                                     'It searches downward from the specified search path and stops once it reaches the '
                                     'first level which contains a git repository. '
                                     'The log is written to a file or output to the screen.')
    parser.add_argument('path', help='the path below which to check for git repositories')
    parser.add_argument('-o', '--outpath', dest='outputpath', help='the path of where to put the build_state.log file. '
                        'If empty, the output is shown on the terminal.')
    parser.add_argument('-n', '--nopatch', action='store_true', help='do not provide patches of changed files.')
    parser.add_argument('-d', '--list-debs', dest='list_debs', action='store_true',
                        help='list also all installed debian packages')
    parser.add_argument('-p', '--list-pypkgs', dest='list_pypkgs', action='store_true',
                        help='list also all installed python packages')
    args = parser.parse_args()

    git_repos = []
    # walk the directory tree within the folder where this file is executed
    for root, directories, files in os.walk(args.path):
        # check if there is a subfolder called '.git'  in there.
        # if this is the case, this is a git rep
        for subdirectory in directories:
            if '.git' in subdirectory:
                # don't go into any .git directories.
                directories.remove(subdirectory)
                git_repos.append(os.path.abspath(root))

    # abort if we did not find a git repo
    if not git_repos:
        print("No git repositories found. Aborting.")
        exit(1)

    # no check all git repos for their state:
    repo_status = []
    for r in git_repos:
        repo = Repo(r)
        # first check, if this is a bare repo
        if repo.bare:
            repo_status.append(RepoStatus(os.path.basename(r),
                                          r,
                                          bare=True))
        else:
            # get all modified files by comparing to the latest commit
            modified = []
            added = []
            deleted = []
            renamed = []
            patch = ""
            filepath = ""

            for diffed in repo.head.commit.diff(None, create_patch=True):
                if diffed.new_file:
                    added.append(diffed.b_rawpath)
                    filepath = diffed.b_rawpath
                elif diffed.deleted_file:
                    deleted.append(diffed.a_rawpath)
                    filepath = diffed.a_rawpath
                elif diffed.renamed_file:
                    renamed.append([diffed.a_rawpath, diffed.b_rawpath])
                    filepath = diffed.b_rawpath
                else:
                    modified.append(diffed.a_rawpath)
                    filepath = diffed.a_rawpath
                # if there is a modified file, let's write the contents
                # from the diff to a patch variable
                if diffed.diff and not args.nopatch:
                    # only add leading dashes if this is the first entry
                    if not patch:
                        patch += "----------------"
                    patch += "\n+++ " + filepath + "\n----------------\n" + \
                             diffed.diff + "----------------"

            # only actually add this, if it is non-empty
            if not patch:
                patch = None

            repo_status.append(RepoStatus(os.path.basename(r),
                                          r,
                                          repo.head.object.hexsha,
                                          dirty=repo.is_dirty(),
                                          untracked=repo.untracked_files,
                                          modified=modified,
                                          added=added,
                                          deleted=deleted,
                                          renamed=renamed,
                                          patch=patch))

    dt = datetime.now()
    t = dt.strftime("%Y-%m-%d %H:%M:%S")
    header = "Installed at: " + t + "\n===========\n"

    debian_packages = None
    if args.list_debs:
        import subprocess
        debian_packages = subprocess.check_output(["apt", "list", "--installed"])

    python_packages = None
    if args.list_pypkgs:
        import pkg_resources
        python_packages_list = sorted([("{0} {1} ({2})").format(d.key, d.version, d.location)
                                      for d in pkg_resources.working_set])
        python_packages = '\n'.join(python_packages_list)

    if args.outputpath is None:
        # print with end='' to ensure same output on screen then when written to file.
        print(header, end='')
        for status in repo_status:
            print(status.as_string(), end='')
            print("===========\n", end='')
        if args.list_debs:
            print(debian_packages)
        if args.list_pypkgs:
            print(python_packages)
    else:
        # write state to file
        # TODO: check wether the file is writable
        with open(args.outputpath+'/build_state.log', 'w') as f:
            f.write(header)
            for status in repo_status:
                f.write(status.as_string())
                f.write("===========\n")
        if args.list_debs:
            # TODO: check wether the file is writable
            with open(args.outputpath+'/debian_packages.log', 'w') as f:
                f.write(header)
                f.write(debian_packages)
        if args.list_pypkgs:
            # TODO: check wether the file is writable
            with open(args.outputpath+'/python_packages.log', 'w') as f:
                f.write(header)
                f.write(python_packages)
